#!/bin/sh

panic() {
	echo $* >&2
	exit 1
}

# locate base paths
if [ "$0" = "genci" ] && [ -z "$GENCI_HOME"] || [ "$0" = "/usr/local/bin/genci" ] && [ -z "$GENCI_HOME" ]; then
	GENCI=/usr/local/bin/genci

	LIB=/usr/local/lib/genci
	SHARE=/usr/local/share/genci
	DOC=/usr/local/share/doc/genci
else
	if [ ! -z "$GENCI_HOME" ]; then
		prefix=$GENCI_HOME
	else
		prefix=$(dirname $0)
	fi

	GENCI=$prefix/genci

	LIB=$prefix/lib
	SHARE=$prefix/share
	DOC=$prefix/doc
fi

# locate config paths
if [ "$(id -u)" = 0 ] || [ -z "$HOME" ] || [ "$GENCI_GLOBAL" = "yes" ]; then
	CONF=/etc/genci
	WORKS=/var/lib/genci
	LOGS=/var/log/genci
else
	CONF=$HOME/.genci
	WORKS=$CONF/works
	LOGS=$CONF/logs
fi

# basic argument sanitizing
if [ $# -eq 0 ]; then
	echo "generic-ci - a generic continuous integration tool"
	echo
	echo "Find more help under http://trustedco.de/generic-ci/"
	echo
	echo
	cat $DOC/LICENSE
	exit 1
fi

# top commands
if [ $# -eq 1 ]; then
	COMMAND=$1
	command_script=$LIB/top-$COMMAND.sh

	if [ ! -f $command_script ]; then
		echo "Command $0 not found!" >&2
		panic "Usage:  $0 <command>"
	fi

	. $command_script
	exit $?
fi

# sub commands
COMMAND=$1
command_script=$LIB/sub-$COMMAND.sh
if [ ! -f $command_script ]; then
	echo "Command $0 not found!" >&2
	panic "Usage:  $0 <command> <configuration>"
fi

# load the configuration
CONFIG=$2
config_file=$CONF/$CONFIG
if [ ! -f $config_file ]; then
	echo "Configuration $CONFIG not found!" >&2
	panic "Usage:  $0 <command> <configuration>"
fi
. $config_file

# sanitize configuration
if [ -z "$SOURCE" ]; then
	panic "SOURCE not set in $CONF/$CONFIG!"
fi

# set up more base paths
WORK=$WORKS/$CONFIG

REPOSITORY=$WORK/repository
BUILDS=$WORK/builds
HEADS=$WORK/heads
RELEASES=$WORK/releases

mkdir -p $WORK $BUILDS $HEADS $RELEASES

# check for repository and clone on demand
if [ ! -d $REPOSITORY ]; then
	git clone --mirror $SOURCE $REPOSITORY >/dev/null || exit $?
fi
GIT="git --git-dir=$REPOSITORY"

# finally run the command
. $command_script
exit $?
